'''1014. 最佳观光组合 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''
def maxScoreSightseeingPair(A):
    n = len(A)
    res = 0
    mi = 0
    for i in range(0,n):
        res = max(res,mi+A[i]-i)
        mi = max(mi,A[i]+i)
            
    return res
''' 1. 两数之和  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

def twoSum(nums, target):
    n = len(nums)
    dicc = {}
        
    for i in range(0,n):
        if target - nums[i] in dicc:
            res = [dicc[target - nums[i]],i]
        else:
            dicc[nums[i]] = i
                
    return res

'''135. 分发糖果 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''
def candy(ratings):
    n = len(ratings)
    if n==1:
        return 1
    dp = n*[0]
    res = 0
    if ratings[0]>ratings[1]:
        dp[0] = 2
    else:
        dp[0] = 1
    
    if ratings[-1]>ratings[-2]:
        dp[-1] = 2
    else:
        dp[-1] = 1
        
    for i in range(1,n):
        if ratings[i]>ratings[i-1]:
            dp[i] = dp[i-1] + 1
        else:
            dp[i] = 1
            
    for i in range(2,n+1):
        if ratings[-i]>ratings[-(i-1)]:
            dp[-i] = max(dp[-i],dp[-(i-1)]+1)
        
        
        res = res + dp[-i]
    
    return res + dp[n-1]
        


''' 55. 跳跃游戏  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''
def canJump(self, nums: List[int]) -> bool:
    n = len(nums)
    if n==1:
        return True
    if nums[0]==0:
        return False
    res = False
    maxpos = 0
    
    for i in range(0,n-1):
        if maxpos>=i:
            maxpos = max(maxpos,i+nums[i])
        if maxpos>=n-1:
            res = True

    return res



'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''


'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''

'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''


'''   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'''